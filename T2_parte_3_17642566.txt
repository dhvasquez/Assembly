DATA:

/////////////////Variables Corrección/////////////////////////////////////
                                                                        //
  arreglo_1       5             //  Arreglo 1                           //
                  3             //                                      //
                  -3            //                                      //
                  2             //                                      //
                  -7            //                                      //
                  18            //                                      //
                  7             //                                      //
                  -1            //                                      //
                  20            //                                      //
                  -30           //                                      //
                  20            //                                      //
                  -33           //                                      //
                  55            //                                      //
                  -19           //                                      //
                  60            //                                      //
                  -18           //                                      //
                  53            //                                      //
                  12            //                                      //
                  5             //                                      //
                                                                        //
  largo_arreglo_1 19            // Largo del Arreglo 1                  //
                                                                        //
  arreglo_2       52            // Arreglo 2                            //35
                  35            //                                      //-53
                  -53           //                                      //22
                  22            //                                      //-3
                  -3            //                                      //23
                  23            //                                      //12
                  12            //                                      //52
                  57            //                                      //21
                  21            //                                      //42
                  42            //                                      //-12
                  -12           //                                      //-35
                  -35           //                                      //14
                  14            //                                      //-23
                  -23           //                                      //23
                  23            //                                      //32
                  32            //                                      //57
                                                                        //
  largo_arreglo_2 16            // Largo del Arreglo 2                  //
                                                                        //
//////////////////////////////////////////////////////////////////////////

//! begin [inicio código alumno]

/////////////////Variables Alumno/////////////////////////////////////////
  aux_1           0
  aux_2           0

  contador        0


/////////////////Fín Variables Alumno/////////////////////////////////////

CODE:

  JMP main                     // Iniciar Programa

//////////////////Subrutinas Alumnos//////////////////////////////////////
siguiente:
  POP B
  INC B
  POP A
  JMP ordenar_arreglo

swap:
  MOV (aux_1),A
  MOV (aux_2),B
  POP B
  MOV A,(aux_2)
  MOV (B),A
  INC B
  MOV A,(aux_1)
  MOV (B),A
  MOV A,(contador)
  ADD A,1
  MOV (contador),A
  POP A
  JMP ordenar_arreglo

algo:
  MOV A,(contador)
  CMP A,0
  JEQ ordenado
  MOV A,0
  MOV (contador),A
  CALL main

ordenado:
  RET

ordenar_arreglo:                // Recibe Largo en A, Puntero en B
  SUB A,1
  CMP A,0
  JEQ algo
  PUSH A
  MOV A,(B)
  PUSH B
  INC B
  MOV B,(B)
  CMP A,B
  JGT swap
  CMP A,B
  JLE siguiente
  RET


//////////////////Fín Subrutinas Alumnos//////////////////////////////////

//! end [fin código alumno]

/////////////////Corrección///////////////////////////////////////////////
                                                                        //
end: JMP end                    // Fín                                  //
                                                                        //
main:                           // Llamadas para ordenar Arreglos       //
                                                                        //
  MOV A,(largo_arreglo_1)       // Largo del Arreglo 1 en A             //
  MOV B,arreglo_1               // Puntero al Arreglo 1 en B            //
  CALL ordenar_arreglo             // Ordenar Arreglo                   //
                                                                        //
  MOV A,(largo_arreglo_2)       // Largo del Arreglo 2 en A             //
  MOV B,arreglo_2               // Puntero al Arreglo 2 en B            //
  CALL ordenar_arreglo          // Ordenar Arreglo                      //
                                                                        //
  NOP                           // Reservado para Corrección            //
  NOP                           //                                      //
  NOP                           //                                      //
  NOP                           //                                      //
  NOP                           //                                      //
  NOP                           //                                      //
  NOP                           //                                      //
  NOP                           //                                      //
  NOP                           //                                      //
                                                                        //
  JMP end                       // Terminar                             //
                                                                        //
//////////////////////////////////////////////////////////////////////////